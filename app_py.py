# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Vu7XiZo3u6Z9gpminxa4LvZiOtZzgGnm
"""

# -----------------------------------------------
# ✅ Install (for Google Colab only)
# !pip install -q gradio transformers accelerate torch matplotlib pandas
# -----------------------------------------------

# Imports
import gradio as gr
import torch
import pandas as pd
import matplotlib.pyplot as plt
import json
import os
from datetime import datetime
from transformers import AutoTokenizer, AutoModelForCausalLM, pipeline

# -----------------------------------------------
# 🔐 STEP 1: Hugging Face Token (for now hardcoded)
HF_TOKEN = " token "  # Replace this with your Hugging Face token
model_id = "ibm-granite/granite-3.3-2b-instruct"

# Load model and tokenizer
tokenizer = AutoTokenizer.from_pretrained(model_id, token=HF_TOKEN)
model = AutoModelForCausalLM.from_pretrained(
    model_id,
    device_map="auto",
    torch_dtype=torch.float16,
    token=HF_TOKEN
)

# Create pipeline
pipe = pipeline("text-generation", model=model, tokenizer=tokenizer)

# -----------------------------------------------
# 🧠 Core Function: Ask Granite Model
def ask_granite(prompt):
    inputs = tokenizer(prompt, return_tensors="pt").to(model.device)
    outputs = model.generate(**inputs, max_new_tokens=200)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# -----------------------------------------------
# 💬 Feature Functions

def predict_disease(symptoms):
    prompt = f"A patient reports the following symptoms: {symptoms}. What is the likely disease?"
    return ask_granite(prompt)

def home_remedy(disease):
    prompt = f"Suggest effective natural home remedies for {disease}."
    return ask_granite(prompt)

def patient_chat(question):
    prompt = f"As a medical assistant, respond to this health-related question in an empathetic and informative way: {question}"
    return ask_granite(prompt)

def treatment_plan(condition):
    prompt = f"Provide a complete treatment plan for the condition: {condition}. Include medications, lifestyle tips, and follow-up advice."
    return ask_granite(prompt)

# -----------------------------------------------
# 📊 Sentiment Analysis + Dashboard

sentiment_pipeline = pipeline("sentiment-analysis")
sentiment_counts = {"POSITIVE": 0, "NEGATIVE": 0, "NEUTRAL": 0}
interaction_log = []

def submit_feedback(text):
    result = sentiment_pipeline(text)[0]
    sentiment_label = result['label'].upper()
    score = round(result['score'] * 100)

    if sentiment_label not in sentiment_counts:
        sentiment_label = "NEUTRAL"

    sentiment_counts[sentiment_label] += 1

    entry = {
        "timestamp": datetime.now().isoformat(),
        "text": text,
        "sentiment": sentiment_label,
        "score": score
    }

    interaction_log.append(entry)

    # Save logs
    pd.DataFrame([entry]).to_csv("sentiment_log.csv", mode='a', header=not os.path.exists("sentiment_log.csv"), index=False)
    if os.path.exists("sentiment_log.json"):
        with open("sentiment_log.json", 'r') as f:
            data = json.load(f)
    else:
        data = []
    data.append(entry)
    with open("sentiment_log.json", 'w') as f:
        json.dump(data, f, indent=2)

    return f"Sentiment: {sentiment_label} ({score}%)"

def plot_dashboard():
    labels = list(sentiment_counts.keys())
    sizes = list(sentiment_counts.values())
    colors = ["green", "red", "gray"]
    fig, ax = plt.subplots()
    ax.pie(sizes, labels=labels, colors=colors, autopct="%1.1f%%")
    ax.set_title("Overall Sentiment Distribution")
    return fig

def plot_sentiment_trends():
    if not interaction_log:
        return None
    df = pd.DataFrame(interaction_log)
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df['minute'] = df['timestamp'].dt.strftime('%H:%M')
    fig, ax = plt.subplots(2, 1, figsize=(8, 6))
    trend = df.groupby(['minute', 'sentiment']).size().unstack().fillna(0)
    trend.plot(ax=ax[0], marker='o')
    ax[0].set_title("📈 Sentiment Trend Over Time")
    ax[0].set_ylabel("Count")
    ax[0].set_xlabel("Time")
    df['sentiment'].value_counts().plot(kind='bar', ax=ax[1], color=["green", "red", "gray"])
    ax[1].set_title("📊 Sentiment Count")
    ax[1].set_ylabel("Total")
    ax[1].set_xlabel("Sentiment")
    plt.tight_layout()
    return fig

# -----------------------------------------------
# 📦 Download Helper Functions

def serve_csv(): return "sentiment_log.csv"
def serve_json(): return "sentiment_log.json"

# -----------------------------------------------
# 🚀 Gradio App with 5 Tabs
with gr.Blocks() as app:
    gr.Markdown("## 🧠 Citizen AI – Health Assistant\nA generative AI platform for intelligent healthcare support.")

    with gr.Tab("🩺 Symptom Identifier"):
        gr.Markdown("Describe your symptoms.")
        symptom_input = gr.Textbox(label="Enter Symptoms")
        symptom_output = gr.Textbox(label="Predicted Condition")
        gr.Button("Predict").click(predict_disease, symptom_input, symptom_output)

    with gr.Tab("🌿 Home Remedies"):
        gr.Markdown("Enter a condition to get natural remedies.")
        remedy_input = gr.Textbox(label="Enter Disease")
        remedy_output = gr.Textbox(label="Remedy Suggestions")
        gr.Button("Get Remedy").click(home_remedy, remedy_input, remedy_output)

    with gr.Tab("💬 Patient Chat"):
        gr.Markdown("Ask a health-related question.")
        chat_input = gr.Textbox(label="Your Question")
        chat_output = gr.Textbox(label="AI Response")
        gr.Button("Ask").click(patient_chat, chat_input, chat_output)

    with gr.Tab("📝 Treatment Plan Generator"):
        gr.Markdown("Enter a condition to get a complete treatment plan.")
        treatment_input = gr.Textbox(label="Enter Condition (e.g., diabetes)")
        treatment_output = gr.Textbox(label="AI-generated Treatment Plan")
        gr.Button("Generate Plan").click(treatment_plan, treatment_input, treatment_output)

    with gr.Tab("📊 Health Trends Dashboard"):
        gr.Markdown("Submit feedback and see sentiment trends.")
        feedback_input = gr.Textbox(label="Enter Health Feedback")
        feedback_output = gr.Textbox(label="Sentiment Result")
        submit_btn = gr.Button("Analyze Sentiment")
        dashboard_plot = gr.Plot(label="Trend Over Time")

        submit_btn.click(submit_feedback, feedback_input, feedback_output)
        submit_btn.click(plot_sentiment_trends, None, dashboard_plot)

        with gr.Row():
            csv_out = gr.File(label="Download CSV Log")
            json_out = gr.File(label="Download JSON Log")
            gr.Button("📥 Download CSV").click(fn=serve_csv, outputs=csv_out)
            gr.Button("📥 Download JSON").click(fn=serve_json, outputs=json_out)

app.launch()

